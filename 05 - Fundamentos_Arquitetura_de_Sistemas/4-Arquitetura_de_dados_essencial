Arquitetura de dados essencial

Objetivos:
1. Conceitos de Dados
2. O que é um Banco de Dados
3. Banco de Dados Relacionais
4. Exemplo prático


Dados?
Valores + ocorrências -> Dados

Importância = de dados podemos obter informações e com ela conhecimento.

Dados digitais (um arquivo txt pode ser um formato de dado digital)

Modelo sustentável:
- Estruturação 
- Durabilidade 
- Velocidade = imagine uma grande empresa com milhares de registro.
- Controle de Acesso = acesso restrito a algumas pessoas.
- Isolamento


Banco de Dados:

Abstração
Pegar a informação do meio físico (organizado ou não), e transformar numa visão pratica para transfirmar em conhecimento aos usuários.

SGDBs

- Linguagem de definição = liguagem onde pode definir a estrutura dos dados
- Linguagem de manipulação = onde recupera ou altera a informação.
- Dicionário de dados = banco de dados dentro do banco que guarda a estrutura.


Modelos do banco de dados:

Modelo Flat (um dos mais comuns):

é uma tabela, como excel

Modelo Hierárquico (o primeiro a surgir):

Divisão de certos grupos em árvore hieraquica, modelo que quase já não é mais utilizado.
Registro do windows é baseado em modelo hirarquico.


Modelo Relacional (mais utilizado no mercado):

Um conjunto de tabelas que se relacionam entre si, obedecendo algumas regras.


Outros modelos:

- Redes - Grapho
- Orientado a Objetos
- Objeto-Relacional
- Big Data (engloba varias carcteristicas de dados com grande volume de informação)






2 - Banco de Dados Relacionais

sistemas que gerenciam
SGDBR (sistemas gerenciais de bancos de dados relacionais) - RDBMS

Composto por entidades que agrupam as informações.
Entidades = tabelas

Tableas possuem as linhas que contem as informações.

Linhas = Registros ou Tuplas

Colunas, que é a definição do que significa cada informação vertical.

Chaves PK/FK, PK são unicas e nao tem duplicidades, FK chaves estrangeiras, que cria a relação entre as tabelas.


Modelagem:

- Modelo conceitual - MER - Modelo Entidade Relacionamento.

- Modelo Lógico - Implementação


MER - DER (Diagrama Entidade Relacionamento)

Diagrama facilita a compreensão de como o modelo deve se comportar, aplicando conceitos de normalização.

Diagrama grafico onde podemos representar as entidades (tabelas), nome, atributos, relacionamentos da entidade.

Relações diretas e indiretas.

Entidade Forte = entidade que não depende de outra para existir.

Entidade Fraca = tabela ou entidade que dependem de outra para existir.


Relacionamento M -> N

Entidade associativa



Normalização:

1a .. 5a - Formas normais
1, 2 e 3a - Mais comum


modelo relacional permite criar sem ter normalização.

1a - tem a ver com a existencia de valores unicos em cada coluna.

uma vez que tenha duas informações, precisa ser quebrada em uma nova coluna ou uma nova entidade.

2a - resolve problema da digitação ou duplicidade em linhas.

pode transformar em nova entidade.

3a - os valores precisam ser totalmente dependentes da chave primaria, e não pode depender de valores que não são chave e numero conjunto.

Você só esta na 2a forma normal se já estiver na 1a forma normal, e assim por diante.






3 - SGDBR - SQL (Structured Query Language)


SGDBR - Vários processo que atuam gravando em disco, e memoria, extraindo e protegendo dados, verificando segurança de acesso, entre outros.

Existe uma necessidade maior de gerenciar o modelo, realizar a muntençao dos dados e recuperar esses dados.


SQL pilares:

- DDL - Data Definition Language - Linguagem que utiliza para definir o banco.
Alterar os dados fisicamente no banco.

- DML - Data Monipulation Language - Linguagem responsavel pela manipulação dos dados em termos físicos.
Incluir dados, alterar as informações, remover linhas na tabela.

- DQL - Data Query Language - Liguagem de consulta aos dados.
Extração e exibição da informação.


DDL:

Create Table Cliente
(
Codigo number(10) Not Null Primary Key,
Nome varchar(50) Not Null,
Telefone varchar(15)
)

Pode criar uma tabela sem primary key (não é recomendado), mas pode criar para ter um pouco mais de performance.


DML:

Insert into Cliente (codigo, nome, telefone)
values (1, "texto", "(12)99999")

Pode omitir colunas no insert, porém se for coluna obrigatoria vai dar erro.

Null (padrão) = não ocupa espaço de storage, problemas de indexação..
Espaço em branco = ocupa um espaço de memória para essa coluna.

Delete from cliente
where codigo = 1

Update cliente
set nome = "texto"
where codigo = 1

É permitido executar sem where, porem no caso do Delete pode apagar tudo, no Update pode atualizar tudo com o mesmo dado.


DQL:

Select codigo,
	nome
from cliente
<where> codigo = 1
 <group by> profissao
 <having> count(1) > 0
<order by> nome, codigo

Pode colocar quantos Where são necessários, sempre adicionando o AND.


Postgres sql deixa fazer o select sem from.


Algebra Relacional:

Query:

Utilizar o select com o Union entre os selects.

Regra basica nas teorias de conjunto = precisa ter equivalencia nas suas colunas entre os conjuntos que quer aplicar a operação, seja de union, intersecção ou subtração.


Select Codigo,
	nome
from cliente
where codigo = 2
	Union
Select codigo,
	nome
from cliente
where nome = "texto"


Outro exemplo de utilização da teoria de conjuntos é numa query unica.

Select quantidade,
	valor,
	descrição (outra tabela)
from item_valor
JOIN Produto (outra tabela)
ON Codigo = Cod_Produto
where valor > 5


Funções de Conjunto:
Funções que eu posso aplicar em cima desse conjunto.

Select Sum(ven.Quantidade) as QTotal
	, Sum(ven.Valor) as VTotal
	, pro.Descricao
from Item_vnda ven
JOIN Produto pro
ON pro.Codigo = ven.Cod_Produto
where ven.Valor > 5
Group by pro.Descricao
Having Sum(ven.Valor) >= 10


No 'from' não pode haver o alias "as".**

Todas as colunas que eu colocar no meu select e que não estão encapsuladas em uma função de conjunto, devem ser colocadas na clausula 'Group by' **

Em 'sun' tem outras funções de conjunto:

min = menor valor
max = maior valor
avg = media


Clausula 'Having', serve para filtrar o resultado de minha função de conjunto, não posso usar ela sem o 'Group by'


Index:

Select ...
Where Profissao = 1
and Genero = "M"

Para realizar a consulta acima em um banco de dados real, poderia demorar muito essa consulta, para solucionar este problema temos o Index.

O Index é uma pequena tabela extraida da original com apenas as colunas que queremos verificar.

Essa pequena tabela é física e memória.

No caso de dar shutdown na maquina e precisar iniciar o bd não deve esperar que ele crie novamente a tabela, e tem que estar alocado na memoria pois é mais rápido no computador.


Index pode ter quantas colunas precisar.

Index afeta a performance do DML.*




4 - Transactions

SGDBR deve permitir que muitos usuários acessem os mesmos recursos ao mesmo tempo.

Aquilo que você pode fazer dentro de uma sessão.

Read commited - Ler o que já foi aplicado no banco.

Uma transaction possui inicio, resolução e fim.

Inicio = Insert, delete, update
Resolução = Commit, Rollback
Fim = Novos dados ou dados originais


ACID - Transactions

Atomicidade = Todas as operaçoes sejam executadas com sucesso, commit ou rollback.

Consistência = Unicidade de chaves, restrições de integridade lógica, etc.

Isolamento = várias transações podem acessar simultaneamente o mesmo registro (ou parte do registro)

Durabilidade = depois do commit, mesmo com erros, queda de energia, etc. As alterações devem ser aplicadas. (mantem log transacional)




5 - SGDBR na prática

SGDBs - R

Versões que são relacionais e comerciais:

- Oracle: um dos mais utilizados no mundo, possui uma gama de ferramentas.

- MS Sql Server: mesma linha que o anterior

- IBM DB2

DBs Gratuitos:

- PostgreSQL

- MySQL: websites e apps leves, não tem algumas regras estabelecidas no banco, atentar-se a estes fatos.

- SQLite: utilizado principalmente em softwares embarcados, rapido acesso aos dados.


Instalando Postgres:

Ubuntu
$ sudo apt update
$ sudo apt install postgresql postgresql-contrib



6 - Criando banco de dados

Criando banco de dados via terminal.






Erros do teste de conhecimento:

Qual afirmação é correta para DDL?

É responsável pela alteração do dicionário de dados.


