1 - Conhecendo o framework

Objetivos da aula

1. Passado, presente e futuro do .Net
2. O que é, como e onde usar .Net
3. Quem usa .Net


Parte 1 - Passado, presente e futuro do .Net:

Anos 70:
Microsoft iniciou nos anos 70 criando linguagens de programação: Basic

Anos 80:

Aurge o DOS, que foi utilizado como OS padrão para computadores IBM.

Nos próximos anos a Microsoft atua fortemente na criação do OS Windows.*

Anos 90: 1997

a Microsoft tentou consolidar as ferramentas de desenvolvimento (IDEs e runtimes) com o Visual Studio 97:

- Visual Basic 5
- Visual FoxPro 5
- C++ 5
- J++ (Java mais adaptado ao windows)

1998:

Lançamento do Visual Studio 6:

- Visual Basic 6
- Visual FoxPro 6
- C++ 6
- J++6


1999:

Acott Guthrie criou uma ferramenta web com Java, e a chamou de ASP+ (depois chamou APS Next e depois ASPX)

Jason Zander ajudou na criação de um common runtime para VB e C++ (CLR)

Javai ia bem! Então a Sun Microsystems fez um acordo para a Microsoft não mexer mais com Java!

Com isso, Anders Hejlsberg começou a trabalhar no C#.


2000:

Microsoft lança o novo ambiente de desenvolvimento .Net 1.0 - inicialmente chamado de Next Generation Windows Services (NGWS)

2001:

Miguel de Icaza começa a trabalhar no projeto Mono, uma reimplementação black box do .Net, open source e multiplataforma.

2002:

Lançamento do VIsual Studio .Net com C# 1.0.
Conhecido como 22 linguagens, 1 plataforma:

- C# .net
- C++ .net
- VB .net
- J# .net
- Entre outras


2003:

Lançamento do .Net 1.1 com o Visual Studio 2003.
Trabalham em melhorias na CLR para lançar a CLR 2.

CLR:

Cada linguagem tem seu compilador, que a transforma numa linguagem intermediaria (CIL), essa liguagem intermediaria é interpretada pela CLR que converte a IL para linguagem de máquina.

Ter a linguagem intermediaria sendo interpretada pelo CLR foi o que permitia a plataforma .Net ter várias linguagens sendo usadas no mesmo ambieente de desenvolvimento.


2005:

Lançamento do .Net 2.0 com o C# 2.0 no Visual Studio 2005.
Microsoft começa a atingir seu objetivo inicial, inclusive evoluindo na web.


2007-2008:

Lançamento do .NET 3.5 com C# 3.0 no Visual Studio 2008, com Silverlight, WPF e WCF.
Microsoft contrata um time de pessoas que tinham uma pegada open source e começam a atuar na criação do ASP.NET MVC.
Começa a se falar em Windows Azure.

2010:

Lançamento do .Net 4.0 com o C# 4.0 no Visual Studio 2010, também com F#.

Microsoft lança comercialmente Windows Azure.

Anders Hejlsberg começa a trabalhar no Typescript.


2011:

Miguel de Icaza inicia Xamarin, basicamente ele desenvolvia em C# aplicativos que rodam Android e iOS.


2012:

Lançamento do .Net 4.5 com C# 5.0 no Visual Studio 2012.

Lançamento do Typescript.

2013:

Lançamento do .Net 4.5.1. no Visual Studio 2013.

Inicio do Roslyn, um novo compilador para C# e VB.NET.

Microsoft continua atuando mais na frente JS e aumenta também a incorporação de ferramentas open source ao ambiente.

Já temos aqui o ASP.NET mais consolidado com o MVC, Web API e SignaIR.

Web API = voltado para serviços web.

SignaIR = framework para se ter comunicação real time como de chats.

Mas, tudo ainda é muito Windows!*


2014:

Satya Nadella se torna CEO da Microsoft e direciona o foco da empresa para cloud.

Criação do .Net Foundation para gestão de projetos open source.

Windows Azure passa a se chamar Microsoft Azure.

É introduzido o conceito do ASP.NET vNext, posteriormente chamado de ASP.NET Core.

A ideia é que teria uma biblioteca base do .net, que seria compartilhado pelo CLR padrão e o novo Core CLR, mais focado em cloud/Server optimized.


2015:

Lançamento do .Net 4.6 com C# 6.0 no Visual Studio 2015.

Lançamento do Visual Studio Code (open source e multiplataforma).*


2016:

Microsoft adquire a Xamarin e adiciona o produto como parte de sua stack .Net e projetos open source.

Lançamento do Visual Studio for Mac.
 
Lançamento do .Net Core 1.0 - totalmente novo, open source e multiplataforma! *

A ideia é ter o ASP.NET 4.6 e ASP.NET Core 1.0, logo abaixo de cada vem o .Net Framework 4.6 e .NET Core 1.0, com suas respectivas bibliotecas comunicando com os compiladores e rutimes.

Temos como se fossem dois frameworks, o .Net Framework e .Net Core.


2017:

Lançamento do .Net Framework 4.7 com o C# 7.0 no Visual Studio 2017.

Lançamento do .Net Core 2.0 com C# 7.0 Visual Studio, Visual Studio Code ou Visual Studio for Mac 2017.


2019:

Lançamento do .Net Framework 4.8 com C# 7.3 no Visual Studio 2019.

Lançamento do .Net Core 3.0 com o C# 8.0 no Visual Studio 2019, Visual Studio Code ou Visual Studio for Mac 2019.


2020:

.NET Framework está pronto na versão 4.8!
E deixa de ser evoluído - junto com ele WCF e ASP.NET Webforms.

Previsto lançamento do .NET 5!!! **


