Functions e operadores

- Arrow function tem retorno implicito.

- Funções também são objetos, então podemos criar propriedades dentro da fonção = fn.prop

- Pode receber parametros.
- Receber e retornar funções.

- arrow function o this não muda, já a função o this se refere a onde ela foi executada, ou seja, se uma função for executada dentro do contexto de um objeto o this referenciará este objeto.


Array:

Também é um objeto, porém permite que crie várias outras estruturas de dados dentro.

.length = retorna a quantidade de itens de um array.

Array.isArray(...) = verificar se é array

forEach = Iterar os itens do array.
Pra cada item executa uma função.


Os próximos exemplos não alteram a referencia do objeto, eles retornam um novo:

.filter() = Filtrar array

.map() = Retornar um novo

.reduce() = Transforma um array em outro tipo


Operadores:

- Aritméticos
- Atribuição
- Comparaçãõ
- Condicional
- Lógicos
- Spread

	
Operador binário:

Recebe dois operandos

Operador unario:

Somente um operando


Incremento (++) e Decremento (--)

++x ou --x
x++ ou x--

const a = ++2; // 3
const b = 2++; // 2


Negação (-) e Adição (+)

-3
+"3" // retorna 3 (number)
+true // retorna 1
+false // retorna 0
-true // retorna -1

Operador de exponenciação (**)
2 ** 3 // retorna 8
10 ** -1 // retorna 0.1


Atribuição:

+=
-=
*=
/=
%=

Comparação:

== igualdade
=== extritamente igual
!= diferente
!== extritamente diferente


Condicional:

Operador Ternário:

condicao ? valor1 : valor2

true ? 'foo' : 'bar' // Retorna 'foo'
false ? 'foo' : 'bar' // Retornar 'bar'


Operadores Logicos:

&& = AND
|| == OR

Não lógico:
!exp1

var n1 = !true; // !t retorna false
var n2 = !false; // !f retorna true
var n3 = !"Gato"; // !t retorna false


