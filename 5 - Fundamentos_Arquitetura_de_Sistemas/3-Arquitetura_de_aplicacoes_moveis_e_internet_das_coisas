Arquitetura de aplicações móveis e internet das coisas

1 - Coneitos da Internet das Coisas

A internet começou com o ARPANET, que priorizava conectar os computadores dos centros de pesquisas.

Surgem os aplicativos -> email, browser, navegadores, ecommerce.
Com a chegada do smartphone houve uma explosão dos apps.

Internet é uma rede de pessoas conectadas trocando informações constantemente.

Internet das Coisas:

Quando coisas utilizam essa rede para trocar dados e enviar informações.

Por que conectar as coisas?
- Embutir sensores em objetos do dia-a-dia
- Coletar dados dos sensores
- Usar o dado para tomar decisão.

Conceitos básicos de IoT:
Things: coisas (onde quer colocar sensores e coletar dados)
Cloud: Nuvem (colocar os dados e processar os dados)
Intelligence: Inteligencia (utilizar os dados e usá-los de forma inteligente)


Exemplos de onde podemos empregar o IoT:

Smart Buildings (Exemplo um edifício, um predio comercial, uma industria..)

Capacidade de coletar dados desses componentes e utilizá-los para melhorar os processos.


Smart Home -> Coletar dados de diversos sensores, a diferença é que ele também prevê a presença do morador da casa.


Wearables (vestíveis) -> componentes que colocamos em nosso corpo e são coletados dados, como saúde, habitos, locais em que frenquentamos.


Agriculture -> empregado principalmente em ter processos produtivos mais sustentáveis, pode ter a cada plantio um sensor para medir a umidade do solo.


Smart Transportation -> veiculos passam a coletar dados de trânsito (exemplo empresa Tesla).


RFID Supply Chain -> onde o IoT nasceu, onde nasceu a tecnologia RFID (etiquetas por radio frequencia), consegue ter todo o processo produtivo e de armazenamento, no centro de distribuição, nas lojas e até o cliente final, pode ser rastreavel pelos RFIDs.


Energy Efficiency -> é possivel coletar dados de fontes coletoras e consumidoras de energia, criando rede informação para tomada de decisão.



Computação Ubíqua:

Mark Weiser
"A computação ubíqua é a terceira onda da computação que está apenas começando. Primeiro tivemos as mainframes compartilhados por várias pessoas. Estamos na era da computação pessoal com pessoas e máquinas estranhando umas às outras. A seguir vem a computação ubíqua, a era da tecnologia 'calma', quando a tecnologia recua para o pano de fundo de nossas vidas."

"As tecnologias mais importantes são aquelas que desaparecem. Elas se integram à vida do dia a dia, ao nosso cotidiano, até serem indistinguíveis dele."


é quando os computadores saem do nosso campo de visão, quando a tecnologia recua para um plano de fundo e se torna tão importante pois não a vemos de uma forma mais fácil, então com o crescimento de IoT vai acelerar, bilhões/ trilhões de dispositivos conectados em nossa rede.

"Quando a tecnologia se torna realmente eficaz"


Desafios da IoT:

- Privacidade e Segurança.
- Quantidade exponencial de dispositivos conectadas na rede.
- Ser capaz de processar e armazenar uma enorme quantidade de informações.
- Gerar valor a partir dos dados coletados.



2 - Arquitetura da IoT

Produtos out of the box -> produtos que voce ja não vê mais o 'hardware'.


Considere esses atributos na escolha:

- baixo consumo de energia
- rede de dados limitado
- resiliencia
- segurança
- customização
- baixo custo


Arduino <3

- plataforma de prototipagem
- com entradas/saídas
- desenvolvedor escreve em C/C++
- interface serial ou USB
- shields


Embarcados:

- MCUs -> Microcontrolador de chip único
- Sistema operacional real time (SO que fala diretamente com o hardware e tempo de resposta rapido)
- Embarcado
- Uso industrial, médico, militar, transporte.


Minicomputadores:

Raspberry Pi
- Computador completo
- Hardware integrado em uma única placa
- Roda SO Linux ou Windows
- Uso doméstico e comercial


O protocolo de comunicação:

GPS Tracker - é um embarcado e tem mais controle.
Smartphone/ app.

O protocolo MQTT

é a linguagem que tanto o app no smartphone quanto o embarcado vao utilizar para se comunicar com a nuvem.


MQTT (Message Queue Telemetry Transport)

- Base na pilha do TCP/IP
- Protocolo de mensagem assíncrona (M2M - Machine to Machine)
- Criado pelo IBM para conectar sensores de pipelines de petróleo a satélites.
- Padrão OASIS suportado pelas linguagens de programação mais populares.


(Modelo Cliente Servidor)
Cliente -> request (HTTP) -> Server -> response (HTTP) -> Client


Modelo Publish/Subscribe

Separa quem é o fornecedor da mensagem, do consumidor da mensagem (separação desse client).

Middleware -> MQTT broker: somente entrega a mesnagem.


Esse modelo (publish/subscribe) possui a possibilidade de escalabilidade de lidar com dados muito maior que a client/server, pois houve o desacoplamento de quem publica e quem consome.

Um dispositivo publicando mensagem pode alimentar outros dispositivos que querem ouvir a mensagem.

Publish:
Tem que ter o endereço do Broker (que possui endereço, dns, host).

Especificar o protocolo (mqtt), depois o host, depois vem o tópico, que é como se fosse endereço onde irá entregar a informação.



3 - Flexibilidade dos tópicos e Cloud

A flexibilidade dos tópicos

mqtt (protocolo) :// broker.io (broker) / a6g3l9 (user indentifier) / gps (sensor) / position (information type)

outros tópicos:

mqtt://broker/user/accelerometer -> acelerometro
mqtt://broker/user/gps/position -> posição de um usuário
mqtt://broker/user/gps/velocity -> velicidade do usuário


Subscribe:

Capacidade que um client mqtt, software, um device, etc, tem de se conectar ao broker e passar a ouvir um tópico.


mqtt://broker/+/gps/position -> posição de todos os users

mqtt://broker/user/gps/+ -> todas as posições do user

mqtt://broker/+/# -> buascar as mensagens de todos os users, e de todas informações dos sensores.



Níveis de serviço - 3 niveis

QoS 0 - Quality of Service

- Nivel minimo de menor esforço
- Sem garantia de entrega
- Mensagem não é transmitida

QoS 1 (mecanismo padrão - mais comum usado)

- Garante que a mensagem foi entregue no mínimo uma vez ao recebedor
- Mensagem pode ser retransmitida se não houver confirmação de entrega

QoS 2 (2 pares de entrega)

- Garante que a mensagem foi entregue no mínimo uma vez ao recebedor
- Mensagem pode ser retransmitida se não houver confirmação de entrega


Cloud:

- Grande e cada vez maior número de devices conectados;
- TBs ou PBs de informações;
- Potencial de escala global;


Empresas provedoras de serviços na nuvem:
Amazon, microsoft, Google, IBM, Oracle, Alibaba Cloud


4 - Estudo de caso

Arquitetura é uma questão de escolha.

Broker é o middleware. (somente entrega a mensagem)

Worker é quem vai receber os dados e vai armazenar no data store.


Prova de conceito (somente para testar o funcionamento):

Gps -> App Android

Broker -> Eclipse Mosquitto

Worker -> Node.js (aplicação em Node.js)

Data store -> Banco de dados MySQL



Mínimo Produto Viável (solução mais robusta):

GPS -> GPS Embarcado

Broker -> HiveMQ

Worker -> Akka Scala JVM

Data store -> Banco de Dados noSQL - mongoDB



Outra Solução (Solução Cloud Native) (custo alto):

GPS -> GPS Embarcado

Broker -> AWS IoT Core

Worker -> AWS Kinesis Firehose (data stream)

Data store -> AWS S3



IoT na prática:

gps -> broker -> worker -> cache -> interface grafica/ aplicação web

GPS Embarcado -> AWS IoT Core -> AWS Data Stream -> AWS Lambda (recebe o dado e alimenta uma chave do redis) -> AWS ElasticCache Redis

AWS Lambda = é uma função.
AWS ElasticCache Redis = banco de dados in memory (chave e valor).


Precisa entregar a informação para o usuário final:

AWS ElasticCache -> AWS EC2 -> FeathersJS Backend -> Dashboard

AWS EC2 = são VMs, servidores na amazon onde você pode ter um servidor seu.
FeathersJS = Framework desenhado para que você pode fornecer informações real time para um client.


Um exemplo de entrega seria através de socket passar essa informação quase que real time para o dashboard.




Duvidas do questionário:


A coleta de dados é obtida com ________ alterações.

natureza dinamica.


Qual desafio surge quando usamos muitos dispositivos na mesma rede?

consumo de energia.


